{"version":3,"sources":["assets\\scripts\\Game.js"],"names":["bcxAdapter","require","cc","Class","Component","properties","starPrefab","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","accountDisplay","balanceDisplay","scoreAudio","AudioClip","onLoad","groundY","y","height","timer","starDuration","spawnNewStar","score","account_name","self","initSDK","res","console","log","login","string","getBalanceByAccount","data","COCOS","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","Math","random","randX","randY","jumpHeight","maxX","width","v2","update","dt","gameOver","enabled","gainScore","audioEngine","playEffect","stopAllActions","director","loadScene","sendWinCocos"],"mappings":"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","sourceRoot":"/","sourcesContent":["var bcxAdapter = require(\"bcxAdapter\");\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        player: {\n            default: null,\n            type: cc.Node\n        },\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        accountDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        balanceDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        }\n    },\n\n    onLoad: function () {\n        this.groundY = this.ground.y + this.ground.height/2;\n        this.timer = 0;\n        this.starDuration = 0;\n        this.spawnNewStar();\n        this.score = 0;\n        this.account_name = '';\n        self = this;\n        if(bcxAdapter){\n            bcxAdapter.initSDK(function(res){\n                console.log(\"initSDK\",res)\n              if(res){\n                bcxAdapter.login(function(res){\n                    console.log(\"login\",res)\n                    self.accountDisplay.string = res.account_name;\n                    self.account_name = res.account_name;\n                    bcxAdapter.getBalanceByAccount(res.account_name,function(res){\n                        console.log(\"getBalanceByAccount\",res)\n                        self.balanceDisplay.string = res.data.COCOS;\n                    })\n                })\n              }\n            })\n        }\n    },\n\n    spawnNewStar: function() {\n        var newStar = cc.instantiate(this.starPrefab);\n        this.node.addChild(newStar);\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('Star').game = this;\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function () {\n        var randX = 0;\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\n        var maxX = this.node.width/2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        return cc.v2(randX, randY);\n    },\n\n    update: function (dt) {\n\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            this.enabled = false;   // disable gameOver logic to avoid load scene repeatedly\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gainScore: function () {\n        this.score += 1;\n        this.scoreDisplay.string = 'Score: ' + this.score;\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    gameOver: function () {\n        this.player.stopAllActions(); \n        cc.director.loadScene('gameover');\n        console.log(\"account_name\",this.account_name)\n        if(this.score>0){\n            if(this.account_name == 'test'){\n                console.log(\"you are contract account, can not transfer to self\")\n                return;\n            }\n            bcxAdapter.sendWinCocos(this.account_name,this.score,function(res){\n                console.log(\"sendWinCocos\",res)\n            })\n        }\n    }\n});\n"]}